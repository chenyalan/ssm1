<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 配置包扫描器 -->
    <context:component-scan base-package="com.andlinks.demo"/>
    <!-- 配置注解驱动 -->
    <mvc:annotation-driven/>
    <!-- 视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--配置文件上传-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="104857600"/>
        <property name="maxInMemorySize" value="4096"/>
        <property name="defaultEncoding" value="UTF-8"></property>
    </bean>
    <!--配置拦截器-->
    <!-- 配置自定义的拦截器 -->
    <mvc:interceptors>
        <!-- 这个bean就是自定义的一个类，拦截器 -->
        <!--<bean class="com.andlinks.demo.filter.FilterInterceptor"></bean>-->
        <!-- 这个配置可以配置拦截器作用（不作用）的路径,不起作用的用<mvc:exclude-mapping path=""/> -->
        <mvc:interceptor>
            <!-- 这个path就是起作用的路径，可以使用通配符 -->
            <mvc:mapping path="/student/*"/>
            <bean class="com.andlinks.demo.filter.FilterInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--国际化-->
    <!-- 国际化资源配置,资源文件绑定器-->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <!-- 国际化资源文件配置,指定properties文件存放位置 -->
        <property name="basename" value="resource"/>
        <!-- 如果在国际化资源文件中找不到对应代码的信息，就用这个代码作为名称  -->
        <property name="useCodeAsDefaultMessage" value="true"/>
    </bean>

    <!--上面提到过如果在配置前端控制器时拦截了所有的请求，不做特殊处理就会导致部分静态资源无法使用。如果是这种情况就可以使用下面的配置来访问静态资源文件。-->

    <!--<mvc:resources mapping="/images/**" location="/images/" />-->
    <!--<mvc:resources mapping="/css/**" location="/css/" />-->
    <!--<mvc:resources mapping="/js/**" location="/js/" />-->
    <!--<mvc:resources mapping="/imgdata/**" location="/imgdata/" />-->



    <!--全局异常-->
    <!--<bean id="exceptionResolver" class="com.wxisme.ssm.exception.OverallExceptionResolver"></bean>-->
</beans>